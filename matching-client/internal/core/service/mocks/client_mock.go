// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/raymondgitonga/matching_client/internal/adapters/httpclient"
	"github.com/raymondgitonga/matching_client/internal/core/service"
	"sync"
)

// Ensure, that MatchingClientMock does implement MatchingClient.
// If this is not the case, regenerate this file with moq.
var _ service.MatchingClient = &MatchingClientMock{}

// MatchingClientMock is a mock implementation of MatchingClient.
//
//	func TestSomethingThatUsesMatchingClient(t *testing.T) {
//
//		// make and configure a mocked MatchingClient
//		mockedMatchingClient := &MatchingClientMock{
//			GetPartnerFunc: func(partnerID string) (*httpclient.Partner, error) {
//				panic("mock out the GetPartner method")
//			},
//		}
//
//		// use mockedMatchingClient in code that requires MatchingClient
//		// and then make assertions.
//
//	}
type MatchingClientMock struct {
	// GetPartnerFunc mocks the GetPartner method.
	GetPartnerFunc func(partnerID string) (*httpclient.Partner, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPartner holds details about calls to the GetPartner method.
		GetPartner []struct {
			// PartnerID is the partnerID argument value.
			PartnerID string
		}
	}
	lockGetPartner sync.RWMutex
}

// GetPartner calls GetPartnerFunc.
func (mock *MatchingClientMock) GetPartner(partnerID string) (*httpclient.Partner, error) {
	if mock.GetPartnerFunc == nil {
		panic("MatchingClientMock.GetPartnerFunc: method is nil but MatchingClient.GetPartner was just called")
	}
	callInfo := struct {
		PartnerID string
	}{
		PartnerID: partnerID,
	}
	mock.lockGetPartner.Lock()
	mock.calls.GetPartner = append(mock.calls.GetPartner, callInfo)
	mock.lockGetPartner.Unlock()
	return mock.GetPartnerFunc(partnerID)
}

// GetPartnerCalls gets all the calls that were made to GetPartner.
// Check the length with:
//
//	len(mockedMatchingClient.GetPartnerCalls())
func (mock *MatchingClientMock) GetPartnerCalls() []struct {
	PartnerID string
} {
	var calls []struct {
		PartnerID string
	}
	mock.lockGetPartner.RLock()
	calls = mock.calls.GetPartner
	mock.lockGetPartner.RUnlock()
	return calls
}
