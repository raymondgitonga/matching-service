// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/raymondgitonga/matching-service/internal/core/dormain"
	"github.com/raymondgitonga/matching-service/internal/core/service"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ service.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			GetPartnerFunc: func(ctx context.Context, partnerID int) (*dormain.Partner, error) {
//				panic("mock out the GetPartner method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// GetPartnerFunc mocks the GetPartner method.
	GetPartnerFunc func(ctx context.Context, partnerID int) (*dormain.Partner, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPartner holds details about calls to the GetPartner method.
		GetPartner []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PartnerID is the partnerID argument value.
			PartnerID int
		}
	}
	lockGetPartner sync.RWMutex
}

// GetPartner calls GetPartnerFunc.
func (mock *RepositoryMock) GetPartner(ctx context.Context, partnerID int) (*dormain.Partner, error) {
	if mock.GetPartnerFunc == nil {
		panic("RepositoryMock.GetPartnerFunc: method is nil but Repository.GetPartner was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		PartnerID int
	}{
		Ctx:       ctx,
		PartnerID: partnerID,
	}
	mock.lockGetPartner.Lock()
	mock.calls.GetPartner = append(mock.calls.GetPartner, callInfo)
	mock.lockGetPartner.Unlock()
	return mock.GetPartnerFunc(ctx, partnerID)
}

// GetPartnerCalls gets all the calls that were made to GetPartner.
// Check the length with:
//
//	len(mockedRepository.GetPartnerCalls())
func (mock *RepositoryMock) GetPartnerCalls() []struct {
	Ctx       context.Context
	PartnerID int
} {
	var calls []struct {
		Ctx       context.Context
		PartnerID int
	}
	mock.lockGetPartner.RLock()
	calls = mock.calls.GetPartner
	mock.lockGetPartner.RUnlock()
	return calls
}
